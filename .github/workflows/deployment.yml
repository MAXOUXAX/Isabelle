# This workflow runs when a release is published, or the workflow is manually dispatched
on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (git tag)'
        required: true
        type: string

name: Deploy to Pterodactyl

jobs:
  call-build-workflow:
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ github.event.release.tag_name || inputs.version }}

  deploy:
    runs-on: ubuntu-latest
    needs: call-build-workflow
    environment: production

    env:
      PANEL_URL: ${{ secrets.PANEL_URL }}
      PANEL_SERVER_ID: ${{ secrets.PANEL_SERVER_ID }}
      PANEL_API_KEY: ${{ secrets.PANEL_API_KEY }}

    steps:
      - name: Verify Required Secrets
        run: |
          if [ -z "$PANEL_URL" ] || [ -z "$PANEL_SERVER_ID" ] || [ -z "$PANEL_API_KEY" ]; then
            echo "Error: Required environment variables are not set"
            exit 1
          fi
          # Remove trailing slashes from URL if present
          PANEL_URL="${PANEL_URL%/}"
          echo "PANEL_URL=$PANEL_URL" >> $GITHUB_ENV

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-${{ inputs.version || github.event.release.tag_name }}
          path: build-artifact

      - name: Create Backup
        id: create-backup
        run: |
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$PANEL_URL/api/client/servers/$PANEL_SERVER_ID/backups" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $PANEL_API_KEY")
          
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Error: HTTP status $HTTP_STATUS"
            echo "Response body: $BODY"
            exit 1
          fi
          
          BACKUP_UUID=$(echo "$BODY" | jq -r '.attributes.uuid')
          if [ -z "$BACKUP_UUID" ] || [ "$BACKUP_UUID" = "null" ]; then
            echo "Failed to extract backup UUID from response"
            echo "Response body: $BODY"
            exit 1
          fi
          
          echo "backup_uuid=$BACKUP_UUID" >> "$GITHUB_OUTPUT"
          echo "Successfully created backup with UUID: $BACKUP_UUID"
          
      - name: Wait for Backup Completion
        run: |
          BACKUP_UUID=${{ steps.create-backup.outputs.backup_uuid }}
          while true; do
            RESPONSE=$(curl -s -w "\n%{http_code}" "$PANEL_URL/api/client/servers/$PANEL_SERVER_ID/backups/$BACKUP_UUID" \
              -H "Accept: application/json" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $PANEL_API_KEY")
            
            HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')
            
            if [ "$HTTP_STATUS" -ne 200 ]; then
              echo "Error checking backup status: HTTP status $HTTP_STATUS"
              echo "Response body: $BODY"
              exit 1
            fi
            
            COMPLETED_AT=$(echo "$BODY" | jq -r '.attributes.completed_at')
            if [ "$COMPLETED_AT" != "null" ]; then
              echo "Backup completed successfully at $COMPLETED_AT"
              break
            fi
            echo "Waiting for backup to complete..."
            sleep 10
          done

      - name: Upload Artifact to Pterodactyl Panel
        run: |
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$PANEL_URL/api/client/servers/$PANEL_SERVER_ID/files" \
            -H "Authorization: Bearer $PANEL_API_KEY" \
            --form "file=@build-artifact/*" \
            --form "directory=/app")
          
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Error uploading artifact: HTTP status $HTTP_STATUS"
            echo "Response body: $BODY"
            exit 1
          fi
          
          echo "Successfully uploaded artifact"

      - name: Restart Pterodactyl Server
        run: |
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$PANEL_URL/api/client/servers/$PANEL_SERVER_ID/power" \
            -H "Authorization: Bearer $PANEL_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"signal": "restart"}')
          
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Error restarting server: HTTP status $HTTP_STATUS"
            echo "Response body: $BODY"
            exit 1
          fi
          
          echo "Successfully initiated server restart"