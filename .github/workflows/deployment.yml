# This workflow runs when a release is published, or the workflow is manually dispatched
on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (git tag)'
        required: true
        type: string

name: Deploy to Pterodactyl

jobs:
  call-build-workflow:
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ github.event.release.tag_name || inputs.version }}

  deploy:
    runs-on: ubuntu-latest
    needs: call-build-workflow
    environment: production

    env:
      PANEL_URL: ${{ secrets.PANEL_URL }}
      PANEL_SERVER_ID: ${{ secrets.PANEL_SERVER_ID }}
      PANEL_API_KEY: ${{ secrets.PANEL_API_KEY }}

    steps:
      - name: Verify Required Secrets
        run: |
          if [ -z "$PANEL_URL" ] || [ -z "$PANEL_SERVER_ID" ] || [ -z "$PANEL_API_KEY" ]; then
            echo "Error: Required environment variables are not set"
            exit 1
          fi
          # Remove trailing slashes from URL if present
          PANEL_URL="${PANEL_URL%/}"
          echo "PANEL_URL=$PANEL_URL" >> $GITHUB_ENV

      - name: Generate safe artifact name
        id: artifact-name
        run: |
          NAME="${{ inputs.version || github.event.release.tag_name }}"
          echo "safe_name=${NAME//\//-}" >> $GITHUB_OUTPUT

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-${{ steps.artifact-name.outputs.safe_name }}
          path: build-artifact

      - name: Create Backup
        id: create-backup
        uses: maxouxax/pterodactyl-create-backup-action@v1
        with:
          panel-url: ${{ secrets.PANEL_URL }}
          api-key: ${{ secrets.PANEL_API_KEY }}
          server-id: ${{ secrets.PANEL_SERVER_ID }}

      - name: Create Archive for Upload
        run: |
          tar -czf app.tgz -C build-artifact .

      - name: Upload Artifact to Pterodactyl Panel
        id: upload
        uses: rexlManu/pterodactyl-upload-action@v2.4
        with:
          panel-host: ${{ secrets.PANEL_URL }}
          api-key: ${{ secrets.PANEL_API_KEY }}
          restart: true
          server-id: ${{ secrets.PANEL_SERVER_ID }}
          source: app.tgz
          decompress-target: true
          target: app.tgz

      - name: Waiting for previous step to finish
        run: sleep 10

      - name: Cleanup
        run: |
          rm app.tgz
          rm -rf build-artifact

          curl "$PANEL_URL/api/client/servers/$PANEL_SERVER_ID/files/delete" \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer $PANEL_API_KEY" \
            -X POST \
            -d '{
            "root": "/", 
            "files": ["app.tgz"])
          }'
