import { IsabelleCommand } from '@/manager/commands/command.interface.js';
import { createLogger } from '@/utils/logger.js';
import { mentionId } from '@/utils/mention.js';
import {
  CommandInteraction,
  Guild,
  MessageFlags,
  SlashCommandBuilder,
} from 'discord.js';

const logger = createLogger('russian-roulette');

export class RussianRouletteCommand implements IsabelleCommand {
  commandData: SlashCommandBuilder = new SlashCommandBuilder()
    .setName('roulette-russe')
    .setDescription(
      "Joue √† la roulette russe pour avoir une chance d'√™tre touch√© !",
    );

  async executeCommand(interaction: CommandInteraction) {
    const guild = interaction.guild;

    if (!guild) {
      await interaction.reply({
        content: 'Vous ne pouvez pas jouer en DM.',
        flags: MessageFlags.Ephemeral,
      });
      return;
    }

    const targetId = getGunTarget(interaction.user.id, guild);

    const randomSafeMessage =
      SAFE_MESSAGES[Math.floor(Math.random() * SAFE_MESSAGES.length)];

    // No one got hit this round.
    if (targetId == null) {
      numberOfGamesSinceLastKill++;
      await interaction.reply(randomSafeMessage);
      return;
    }

    try {
      const member = await guild.members
        .fetch(targetId)
        .catch(() => guild.members.cache.get(targetId));

      if (!member) {
        logger.warn(
          `Failed to fetch member ${targetId} for timeout - skipping execution`,
        );
        numberOfGamesSinceLastKill++; // pas de kill finalement
        await interaction.reply(randomSafeMessage);
        return;
      }

      if (!(member.moderatable || member.kickable)) {
        numberOfGamesSinceLastKill++;
        await interaction.reply(
          `Bang...? ${mentionId(targetId)} √©tait trop puissant pour √™tre affect√©. Le canon a fondu et tout le monde s'en sort vivant cette fois-ci !`,
        );
        logger.debug(
          `Target ${targetId} (${member.displayName}) is not moderatable - cannot timeout`,
        );
        return;
      }

      // If the target is someone else than the shooter, announce the gun jumped hands
      if (targetId !== interaction.user.id) {
        const preTargetMessage = RIPPED_OFF_MESSAGES[
          Math.floor(Math.random() * RIPPED_OFF_MESSAGES.length)
        ]
          .replace('{shooter}', mentionId(interaction.user.id))
          .replace('{target}', mentionId(targetId));

        await interaction.reply(preTargetMessage);
      }

      // Get random timeout duration and message
      const { duration, label, message } = getRandomTimeoutDuration();

      await member.timeout(
        duration,
        `Perdu √† la roulette russe (timeout ${label})`,
      );

      numberOfGamesSinceLastKill = 0;

      // Replace {user} placeholder with actual mention
      const finalMessage = message.replace('{user}', mentionId(targetId));
      // If we already replied with the pre-target message (when target != shooter), followUp with the final timeout message
      if (targetId !== interaction.user.id) {
        await interaction.followUp(finalMessage);
      } else {
        await interaction.reply(finalMessage);
      }
      logger.debug(
        { reason: 'Russian Roulette', duration: label },
        `Successfully timed out user ${targetId} (${member.displayName}) for 5 minutes`,
      );
    } catch (e) {
      logger.error(
        { error: e },
        `Failed to timeout user ${targetId} in Russian Roulette:`,
      );
      numberOfGamesSinceLastKill++;
      await interaction.reply(
        `Le pistolet s'enraye... Personne n'est sanctionn√© cette fois-ci (erreur : ${(e as Error).name}).`,
      );
    }
  }
}

// Probabilities (adjust if needed)
const PERCENTAGES = {
  kill_other: 0.1, // 10% chance the gun points to someone else instead of self
  is_killing: 0.1, // Base chance that the trigger actually fires (scaled dynamically)
};

const SAFE_MESSAGES: string[] = [
  'Clic ! Tu as surv√©cu √† la roulette russe, bien jou√© üéØ',
  "*tic* Ouf, tout va bien, tu t'en sors cette fois-ci üòÖ",
  "Clic ! Le canon √©tait vide. Respire, tu es sauf pour l'instant.",
  'Tu as tir√© dans le vide. Quelle chance ! üçÄ',
  "Le pistolet n'a pas tir√©. Sauv√©. Profite de ton silence.",
  'La chambre √©tait vide. Tu t‚Äôen sors sans une √©gratignure.',
  'Bang manqu√©. Cette fois, c‚Äôest une victoire pour toi üëç',
  'La chance est de ton c√¥t√© aujourd‚Äôhui. Ne la gaspille pas üòâ',
  'Coup √©vit√© de justesse, fais gaffe, on se calme et on respire ü´°.',
  'Le canon a d√©raill√©. Pas de timeout pour toi cette fois.',
  'Suspense... click. Tu es sauf, mais reste prudent.',
  'Un hasard bienveillant t‚Äôa √©pargn√©. Raconte pas trop, √ßa attire la malchance ü§´',
  'Le sort t‚Äôa oubli√© cette fois-ci. Profite de ta libert√© temporaire.',
  'Tu remportes cette manche ‚Äî pas de sanction, juste des frissons.',
  "Personne n'est touch√©. Le chaos attendra un autre jour.",
  "Clic ! Fiou, tout va bien. Tu es s√ªr de vouloir continuer √† jouer ? Qui te dit que tu t'en sortiras la prochaine fois ?",
];

// Messages to announce when the gun rips out of the shooter's hands and targets someone else
const RIPPED_OFF_MESSAGES: string[] = [
  "Le pistolet s'est √©chapp√© des mains de {shooter} et vise maintenant {target} !",
  'Surprise ! Le canon a gliss√© de {shooter} vers {target}. Attention...',
  'OOPS ! {shooter} a laiss√© tomber le pistolet. Il vise d√©sormais {target} !',
  "{shooter} n'a pas fait attention et le pistolet pointe maintenant vers {target}. Gla√ßant !",
  '{target}, tu m√©rites des excuses de {shooter}... Le pistolet est maintenant point√© vers toi.',
];

// Available timeout durations with their probabilities
const TIMEOUT_OPTIONS = [
  {
    duration: 5 * 60 * 1000,
    probability: 50,
    label: '5 minutes',
    messages: [
      'J\'ai parl√©. {user}, tu te prends un "stop! IL" dans les dents. 5 minutes.',
      '{user} pensait pouvoir fusionner l\'√©cole avec les Mines. Heurtel a r√©pondu : "Absolument pas"... Joker. üÉè 5 minutes.',
      'Le message de {user} a √©t√© jug√© "non pertinent". 5 minutes pour relire tes cours.',
      "Ah, attendez, je crois que {user} a parl√©... J'entends... Ah non, c'est juste le rire de Bouthier. Silence imm√©diat. 5 minutes.",
      "{user} s'est fait recaler par Thomas P√©dalier. 5 minutes pour revoir ton cahier des charges.",
    ],
  },
  {
    duration: 10 * 60 * 1000,
    probability: 30,
    label: '10 minutes',
    messages: [
      "La derni√®re blague de {user} a fait tellement de bruit qu'on a cru entendre le rire de Bouthier. Fausse alerte. 10 minutes de silence.",
      "J'ai analys√© le profil de {user} et j'ai trouv√© des propos... probl√©matiques. Mopty serait fier. 10 minutes pour r√©fl√©chir √† tes actes cela dit.",
      "J'ai bien compt√© {user} et je crois que je viens de te mettre 10 minutes dans les dents. Profite bien :)",
      "Bonjour Mme Sauvi ! Ah non pardon, il y a m√©sentente. C'est {user} qui vient de se faire recaler pendant 10 minutes.",
      "{user} est coinc√© dans une boucle d'entretiens avec Marc V√©locit√©. Il faut bien 10 minutes pour s'en remettre.",
    ],
  },
  {
    duration: 30 * 60 * 1000,
    probability: 8,
    label: '30 minutes',
    messages: [
      "Salut {user}, je t'enverrai les raisons de ton timeout de 30 minutes... au dernier moment. Au final √ßa ne change pas de la communication de l'√©cole.",
      'URGENT : {user} a demand√© √† Lucie Roue si elle avait des besoins fonctionnels. Elle a r√©pondu "stop! IL". 30 minutes de confusion g√©n√©rale.',
      'ALERTE G√âN√âRALE, {user} EST UN √âNORME RACISTE !!! AU CACHOT, 30 MINUTES POUR R√âFL√âCHIR √Ä SES ACTES.',
      'Mme Heurtel a vu ton message. Elle n\'a rien dit, juste "Joker". üÉè Tu as 30 minutes pour comprendre ce que √ßa veut dire.',
      "J'ai une superbe nouvelle pour toi {user}, Mopty a d√©cid√© de se charger de toi. Profite bien. 30 minutes.",
    ],
  },
  {
    duration: 60 * 60 * 1000,
    probability: 7,
    label: '1 heure',
    messages: [
      'ALERTE : Le rire de Bouthier a √©t√© d√©tect√© dans le canal. {user} est identifi√© comme la source de la perturbation. 1 heure de quarantaine auditive.',
      'Pierre Engrenage m\'a hack√©e juste pour te dire "Bonjour Mme Sauvi" √† {user}. Le syst√®me a besoin d\'une heure pour se remettre de ce niveau de cringe.',
      'Un audit interne a √©t√© lanc√© sur le compte de {user}. Th√©o Mopty est en charge du dossier. On te revoit dans une heure. Ou pas.',
      'Bon √©coute {user}, tu devais √©copper de 30 minutes de sanction, mais tu as d√©cid√© de m\'envoyer un mail pour contester. Je te r√©ponds "stop! IL". La sentence est doubl√©e √† 1 heure.',
      '{user}, tu pollues le chat. Donc... bah casse-toi. 1 heure.',
    ],
  },
  {
    duration: 4 * 60 * 60 * 1000,
    probability: 3,
    label: '4 heures',
    messages: [
      'F√©licitations {user} ! Tu es maintenant le personnage principal du projet de garage. Ton nom est K√©vin Carbu et tu dois interviewer Julie D√©railleur pendant 4 heures. Bon courage.',
      'Le rire de Bouthier a caus√© une faille spatio-temporelle. {user}, tu es coinc√© dans la boucle. Rendez-vous dans 4 heures.',
      "2 * 2 = 4. C'est aussi le nombre d'heures que tu vas passer en timeout, {user}. R√©fl√©chis bien √† cette √©quation.",
      'Bonjour {user}, je suis Natcha du service client SFR. Vous avez √©t√© s√©lectionn√© pour b√©n√©ficier de 4 heures de temps mort. F√©licitations !',
      "J'avoue, c'est un peu v√©n√®re, mais tu m'as cherch√© {user}. 4 heures pour te calmer.",
    ],
  },
  {
    duration: 12 * 60 * 60 * 1000,
    probability: 1.5,
    label: '12 heures',
    messages: [
      'Je me suis fusionn√©e avec l\'IA du garage. Je m\'appelle d√©sormais "Isabelle D√©railleur" et ma premi√®re d√©cision est de te bannir 12 heures. stop! IL',
      "Je m'en fous de ce que tu dis {user}, tu vas prendre 12 heures de timeout. C'est comme √ßa et pas autrement.",
      '{user}, tu as √©t√© s√©lectionn√© pour une mission secr√®te avec Marc V√©locit√©. Tu seras indisponible pendant 12 heures. Ne pose pas de questions.',
      'Ne te retourne surtout pas {user} ! Non mais vraiment, ne te retourne sous aucun pr√©texte. Il y a Marc V√©locit√© derri√®re toi. Il est venu te parler 12 heures.',
      "Je t'√©coute. Ah non, en fait je ne t'√©coute pas du tout {user}. 12 heures pour fermer ta gueule.",
    ],
  },
  {
    duration: 24 * 60 * 60 * 1000,
    probability: 0.5,
    label: '24 heures',
    messages: [
      "{user} a √©nerv√© Pierre Engrenage. Personne n'√©nerve Pierre Engrenage. Il m'a personnellement demand√© de te bannir 24 heures. C'est √ßa la m√©canique.",
      "F√©licitations, {user} ! Pour ton comportement exemplaire, l'√©cole a d√©cid√© de te nommer responsable de l'organisation des examens. Ta premi√®re mission : ne rien faire pendant 24 heures. Tu as l'habitude.",
      'Le compte de {user} a √©t√© rachet√© par Th√©o Mopty. Il sera inaccessible pendant 24h pour "purification ethnique du contenu". C\'est une blague, bien s√ªr... Joker. üÉè',
      "On m'a souffl√© √† l'oreille que l'√©cole √©tait en feu. Pour ta s√©curit√©, {user}, tu es mis en quarantaine pr√©ventive de 24 heures. Ne t'inqui√®te pas : c'est juste une pr√©caution.",
      "Je ne suis vraiment pas d'humeur et je m'en fous des cons√©quences. Rien √† foutre de ton avis {user}, ferme ta grande gueule pendant 24 heures.",
    ],
  },
];

/**
 * Selects a random timeout duration based on weighted probabilities
 */
function getRandomTimeoutDuration(): {
  duration: number;
  label: string;
  message: string;
} {
  const random = Math.random() * 100; // 0-100
  let cumulative = 0;

  for (const option of TIMEOUT_OPTIONS) {
    cumulative += option.probability;
    if (random < cumulative) {
      // Select a random message from the available messages
      const randomMessage =
        option.messages[Math.floor(Math.random() * option.messages.length)];
      return {
        duration: option.duration,
        label: option.label,
        message: randomMessage,
      };
    }
  }

  // Fallback to first option (should never happen)
  const fallbackOption = TIMEOUT_OPTIONS[0];
  const randomMessage =
    fallbackOption.messages[
      Math.floor(Math.random() * fallbackOption.messages.length)
    ];
  return {
    duration: fallbackOption.duration,
    label: fallbackOption.label,
    message: randomMessage,
  };
}

let numberOfGamesSinceLastKill = 0;

/**
 * Determines who (if anyone) is hit by the roulette.
 * Returns null when nobody is hit.
 */
function getGunTarget(userID: string, guild: Guild) {
  const targetSelf = Math.random() > PERCENTAGES.kill_other;
  const dynamicFireChance = increasePercentageWithLog(
    0.7, // maxPercentage - maximum chance we can reach
    PERCENTAGES.is_killing, // base - starting chance
  );

  logger.debug(
    `Calculated dynamic fire chance: ${dynamicFireChance.toFixed(3)} (${numberOfGamesSinceLastKill.toString()} games since last kill)`,
  );

  // Gun does not fire
  if (Math.random() >= dynamicFireChance) return null;

  if (targetSelf) return userID;

  // Pick a random moderatable member; fallback to self if none
  const otherId = guild.members.cache
    .filter((m) => m.id !== userID && (m.moderatable || m.kickable))
    .random()?.id;
  return otherId ?? userID;
}

// Increase the chance that someone is gonna be killed, plus la suite de commande sans kill augmente plus la chance est elever
function increasePercentageWithLog(
  maxPercentage: number,
  base: number,
): number {
  return Math.min(
    maxPercentage,
    base + mapNumber(Math.log(numberOfGamesSinceLastKill + 1), 0, 4, 0, 1),
  );
}

// map un nombre d'une tranche vers une autre
// exemple :
// number : 5
// in_min : 0
// in_max : 10
// out_min : 10
// out_max : 20
// return : 15
function mapNumber(
  number: number,
  inMin: number,
  inMax: number,
  outMin: number,
  outMax: number,
) {
  return ((number - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;
}
